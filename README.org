#+TITLE: Emacs Configuration
#+DATE: April 30, 2022
#+AUTHOR: Wanderson Ferreira

My first configuration files using Doom Emacs with Evil mode enabled.

So far, enjoying a lot. I'm documenting all the learning process in the =docs/=
folder. After 10 years of standard Emacs keybindings, this was a big jump and a
great level of frustration for the first two weeks.

Enjoy and be patient if traveling the same waters.

[[file:docs/README.org][Learn more about Doom and Evil]]

* Documentation for the little voice on your shoulder!

I fear for not knowing was is installed in my Emacs Frameworks. I didn't add
most of the packages explicitly and the anxious from "not knowing" grows every
day in a fast pace.

This is definitely bothering me on Doom Emacs, but before going to the
self-degradation "do-it-yourself because you can" route,  let me try something
new. I will document every aspect of Doom. My goal is to get familiar with what
is around.

Therefore, if I am unsure about what a package does or even if I'm not sure I want to use the package just
*remove it*. Only enabled packages are those I've made significant effort to
understand their value proposition.

| Status | Meaning                                                                                             |
|--------+-----------------------------------------------------------------------------------------------------|
| ‚úÖ     | package kept, with or without modifications from Doom defaults                                      |
| ‚ùå     | package removed, after being assessed and considered not fit to my workflow                         |
| ‚ö†Ô∏è     | package removed, but under consideration                                                            |
| ‚òëÔ∏è     | package kept, something in my workflow broke because of the removal, but I need to dig deeper later |


** Doom CORE
Doom is basically divided into ~core~ and ~modules~ at a very high level. All
the code in ~core~ are related to sane defaults, Doom's foundation on package
management, projects, and a feel more pieces.

These are some packages of my interest:
- [‚úÖ] [[https://github.com/doomemacs/doomemacs/blob/d6d1e600c0b22ce323558002eccdaac6edbcf2b2/core/core-projects.el#L22][projectile]]
- [‚úÖ] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-keybinds.el#L214][which-key]]
- [‚úÖ] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-editor.el#L713][ws-butler]]
- [‚úÖ] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-editor.el#L585][smartparens]]
- [‚ùå] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-ui.el#L481][highlight-numbers]]
- [‚ùå] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-ui.el#L438][all-the-icons]]
- [‚ùå] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-editor.el#L527][helpful]]
- [‚ùå] restart-emacs
- [‚òëÔ∏èÔ∏è] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-editor.el#L429][better-jumper]]
  - I felt the difference in my first day working without this package.

** Doom MODULES
I'll follow the order from ~init.el~ file.

*** company
Only company is installed. Victory! The defaults are nice.

*** STARTED vertico
Packages that I'm interesting in keeping & learning:
- [‚úÖ] [[https://github.com/minad/vertico][vertico]]
  - also enabled ~vertico-multiform-mode~ for project-wide searches
- [‚úÖ] [[https://github.com/oantolin/orderless][orderless]]
  - It is possible to live without orderless and configuring ~completion-styles~ option to consider ~partial-completion~ and ~flex~, however ~orderless~ is a lot faster. Let's keep it around.
  - Amazing! I learned how to use ~orderless~ in company completion UI. As ~SPC~ takes us out of completion, let's use ~&~ as the separator.
- [‚òëÔ∏è] consult
  - First, without ~consult~ my project search via ~SPC /~ was broken inside a Clojure project :(
- [‚ö†Ô∏è] consult-dir
- [‚ö†Ô∏è] consult-flycheck
- [‚ö†Ô∏è] embark
- [‚ö†Ô∏è] embark-consult
- [‚ö†Ô∏è] consult-dir
- [‚ö†Ô∏è] wgrep
- [‚úÖ] marginalia
  - This is useful because as there is a bug with ~uniquify~ and ~persp-mode~ used for workspaces, then I can't really know the difference for several buffers opened with the same name. Therefore, marginalia adds sufficient annotation to make this way better.

*** doom
Nothing here to see.
- [‚ùå] doom-themes
- [‚ùå] solaire-mode

*** popup
Very amazing package developed by Doom team. I'm very interested in digging
deeper here. Taming popup has been one of my worst skills in Emacs.

I enabled ~+all~ special buffers to be handled as popups. Very optimistic about this.

*** vc-gutter
Nowdays, the hint to know which code block was added/modified/deleted compared to remote branch is mandatory.
- [‚úÖÔ∏è] git-gutter-fringe

*** hl-todo
- [‚úÖÔ∏è] hl-todo

*** workspaces
- [‚úÖ] persp-mode
  - I have a couple of modifications to include special buffers from project project to the enabled workspace at the time

*** STARTED evil
Module responsible for bringing Vim over to the party.
- [‚úÖ] evil
  - There are some dependencies required by ~evil~ stated in their README page:
  - Evil requires any of the following for ~C-r~
    - [‚úÖ] [[https://github.com/doomemacs/doomemacs/blob/master/modules/emacs/undo/config.el#L3][undo-fu]]
    - However, Doom also uses undo-fu-session to save/restore undo history. I'm not interested in this.
      - [‚ùå] [[https://github.com/doomemacs/doomemacs/blob/master/modules/emacs/undo/config.el#L27][undo-fu-session]]
- [‚ö†Ô∏è] evil-args
- [‚ö†Ô∏è] evil-easymotion
- [‚ö†Ô∏è] evil-embrace
- [‚úÖ] evil-escape
- [‚úÖÔ∏è] evil-exchange
  - I'm extremely happy I'm going through all of this! What a nice package!!!
  - [[http://vimcasts.org/episodes/swapping-two-regions-of-text-with-exchange-vim/][learn more about this here]]
  - be aware that in Doom the keybinding is bound to ~gx~ instead of ~cx~ as in vim-exchange. Yeah, the way evil works... this is a gem!
- [‚ö†Ô∏è] evil-indent-plus
- [‚ö†Ô∏è] evil-lion
- [‚úÖÔ∏è] evil-nerd-commenter
  - Comment code efficiently!
- [‚ùåÔ∏è] evil-numbers
  - :/ I think I never had to increase/decrease numbers by unit before
- [‚ö†Ô∏è] evil-snipe
- [‚úÖÔ∏è] evil-surround
  - I use this plugin everytime! I'm not using smartparens to handle surrounding.
  - Actually, I use ~add surrounding~ (~yS<textobject>~) a lot but not the next ones:
    - change surrounding: ~cs<old-textobject><new-textobject>~
    - delete surrounding: ~ds<textobject>~
- [‚ö†Ô∏è] evil-textobj-anyblock
- [‚úÖÔ∏è] evil-traces
  - It's useful to visualize the output of some commands before applying it
  - I'm not so good at Ex commands in Vim, so I generally like visual hints that I'm not doing something wrong.
- [‚ùåÔ∏èÔ∏è] evil-visualstar
  - Didn't see any improvement in the behavior of plain ~*~ or ~#~
  - tbh, I think I'm not a power user of Visual mode so I don't see the benefit here.
- [‚ö†Ô∏è] exato
- [‚ö†Ô∏è] evil-quick-diff
- [‚úÖ] evil-collection

*** TODO file-templates
*** TODO multiple-cursors
*** TODO snippets
*** dired
Dired is the main mode for Emacs file-manager operations.

- [‚ùå] diredfl
- [‚úÖÔ∏è] dired-git-info
  - This is nice specially because it comes disabled and I can toggle using ~)~ in Dired buffer
  - However, I'm still having double thoughts about its usefulness... I never needed this feature, but who knows now that I'm aware of it
- [‚ùå] diff-hl
- [‚ùå] fd-dired
- [‚ùå] dired-rsync

*** electric
No external package! Small customization fro Doom also.

*** TODO vc
*** undo
These packages are required by ~evil~ in order to enable ~evil-redo~ (~Ctrl-r~) properly.
 - [‚úÖ] [[https://github.com/doomemacs/doomemacs/blob/master/modules/emacs/undo/config.el#L3][undo-fu]]
   - Simple, stable linear undo with redo for Emacs.
   - Changes compared to Emacs undo:
     - Redo will not pass the initial undo action
     - Redo winn not undo
     - These constraints can be disabled by pressing ~C-g~ before undo or redo.
   - Doom increases the undo-limit, I'd like to revert that to defaults. Look for the default values at ~preferences/+doom.el~
 - [‚ùå] [[https://github.com/doomemacs/doomemacs/blob/master/modules/emacs/undo/config.el#L27][undo-fu-session]]

*** TODO eshell
- [‚ö†] eshell-z
- [‚ö†] eshell-did-you-mean
- [‚ö†] esh-help
- [‚ö†] shrink-path
- [‚ö†] eshell-up
- [‚ö†] eshell-syntax-highlighting

*** TODO syntax
*** TODO lookup
*** magit
- [‚úÖÔ∏è] magit
- [‚ùåÔ∏è] magit-gitflow
  - Oh, I'm glad I don't work following gitflow anymore
- [‚ùåÔ∏è] magit-todos
- [üòé] code-review
  - I'm the maintainer, so yeah! I should use it.
*** macos
- [‚ùå] ns-auto-titlebar
- [‚ùå] osx-trash

*** clojure
Clojure extension packages so I can pay my bills and not get crazy working with
insane langs setup commonly found in the mainstream

- [‚úÖ] clojure-mode
- [‚úÖ] clj-refactor
- [‚úÖ] cider
  - CIDER is a big project and reading its documentation always teaches me something new
  - I also added ~eval-sexp-fu~. Very handy when the cursor is inside a sexp and I want to eval the surrounding sexp
  - I could not make the fuzzy completion work with CIDER. The instructions from CIDER docs didn't work
- [‚úÖ] flycheck-clj-kondo

*** TODO emacs-lisp
*** TODO latex
*** TODO markdown
*** TODO org
*** TODO plantuml
*** TODO ledger
