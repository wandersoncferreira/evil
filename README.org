#+TITLE: Emacs Configuration
#+DATE: April 30, 2022
#+AUTHOR: Wanderson Ferreira

My first configuration files using Doom Emacs with Evil mode enabled.

So far, enjoying a lot. I'm documenting all the learning process in the =docs/=
folder. After 10 years of standard Emacs keybindings, this was a big jump and a
great level of frustration for the first two weeks.

Enjoy and be patient if traveling the same waters.

[[file:docs/README.org][Learn more about Doom and Evil]]

* Documentation for the little voice on your shoulder!

One thing I feared the most about Emacs Frameworks was installing lots of
functionality that I'd never know about because I haven't explicitly added them.

This is definitely bothering me on my current Doom instalation, but before going
to the self-degradation "do-it-yourself because I can" route,  let me try
something new.

I will document every aspect of Doom as soon as I discover them, my goal is to
get familiar with what's around.

Therefore, if I am unsure what a package does or if I want to use it or not:
remove it. Only enable packages that I made significant effort to understand
their value proposition.

| Status | Meaning                                                                     |
|--------+-----------------------------------------------------------------------------|
| ✅     | package kept, with or without modifications from Doom defaults              |
| ❌     | package removed, after being assessed and considered not fit to my workflow |
| ⚠️     | package removed, but under consideration                                    |


** Doom CORE
Doom is basically divided into ~core~ and ~modules~ at a very high level. All
the code in ~core~ are related to sane defaults, Doom's foundation on package
management, projects, and a feel more pieces.

These are some packages of my interest:
- [✅] [[https://github.com/doomemacs/doomemacs/blob/d6d1e600c0b22ce323558002eccdaac6edbcf2b2/core/core-projects.el#L22][projectile]]
- [✅] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-keybinds.el#L214][which-key]]
- [✅] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-editor.el#L713][ws-butler]]
- [✅] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-editor.el#L585][smartparens]]
- [❌] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-ui.el#L481][highlight-numbers]]
- [❌] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-ui.el#L438][all-the-icons]]
- [❌] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-editor.el#L527][helpful]]
- [❌] restart-emacs
- [⚠️] [[https://github.com/doomemacs/doomemacs/blob/master/core/core-editor.el#L429][better-jumper]]

** Doom MODULES
I'll follow the order from ~init.el~ file.

*** company
Only company is installed. Victory! The defaults are nice.

*** STARTED vertico
Packages that I'm interesting in keeping & learning:
- [✅] [[https://github.com/minad/vertico][vertico]]
  - also enabled ~vertico-multiform-mode~ for project-wide searches
- [✅] [[https://github.com/oantolin/orderless][orderless]]
  - It is possible to live without orderless and configuring ~completion-styles~ option to consider ~partial-completion~ and ~flex~, however ~orderless~ is a lot faster. Let's keep it around.
  - Amazing! I learned how to use ~orderless~ in company completion UI. As ~SPC~ takes us out of completion, let's use ~&~ as the separator.
- [✅] consult
  - First, without ~consult~ my project search via ~SPC /~ was broken inside a Clojure project :( seems good reason to ✅ it for now.
- [⚠️] consult-dir
- [⚠️] consult-flycheck
- [⚠️] embark
- [⚠️] embark-consult
- [⚠️] consult-dir
- [⚠️] wgrep
- [❌] marginalia

*** doom
Nothing here to see.
- [❌] doom-themes
- [❌] solaire-mode

*** TODO popup
Very amazing package developed by Doom team. I'm very interested in digging
deeper here. Taming popup has been one of my worst skills in Emacs.

I enabled ~+all~ special buffers to be handled as popups. Very optimistic about this.

*** TODO vc-gutter
*** TODO hl-todo
*** TODO workspaces
*** STARTED evil
Module responsible for bringing Vim over to the party.
- [✅] evil
  - There are some dependencies required by ~evil~ stated in their README page:
  - Evil requires any of the following for ~C-r~
    - [✅] [[https://github.com/doomemacs/doomemacs/blob/master/modules/emacs/undo/config.el#L3][undo-fu]]
    - However, Doom also uses undo-fu-session to save/restore undo history. I'm not interested in this.
      - [❌] [[https://github.com/doomemacs/doomemacs/blob/master/modules/emacs/undo/config.el#L27][undo-fu-session]]
- [⚠️] evil-args
- [⚠️] evil-easymotion
- [⚠️] evil-embrace
- [✅] evil-escape
- [✅️] evil-exchange
  - I'm extremely happy I'm going through all of this! What a nice package!!!
  - [[http://vimcasts.org/episodes/swapping-two-regions-of-text-with-exchange-vim/][learn more about this here]]
  - be aware that in Doom the keybinding is bound to ~gx~ instead of ~cx~ as in vim-exchange. Yeah, the way evil works... this is a gem!
- [⚠️] evil-indent-plus
- [⚠️] evil-lion
- [⚠️] evil-nerd-commenter
- [❌️] evil-numbers
  - :/ I think I never had to increase/decrease numbers by unit before
- [⚠️] evil-snipe
- [✅️] evil-surround
  - I use this plugin everytime! I'm not using smartparens to handle surrounding.
  - Actually, I use ~add surrounding~ (~yS<textobject>~) a lot but not the next ones:
    - change surrounding: ~cs<old-textobject><new-textobject>~
    - delete surrounding: ~ds<textobject>~
- [⚠️] evil-textobj-anyblock
- [✅️] evil-traces
  - It's useful to visualize the output of some commands before applying it
  - I'm not so good at Ex commands in Vim, so I generally like visual hints that I'm not doing something wrong.
- [❌️️] evil-visualstar
  - Didn't see any improvement in the behavior of plain ~*~ or ~#~
  - tbh, I think I'm not a power user of Visual mode so I don't see the benefit here.
- [⚠️] exato
- [⚠️] evil-quick-diff
- [✅] evil-collection

*** TODO file-templates
*** TODO multiple-cursors
*** TODO snippets
*** dired
Dired is the main mode for Emacs file-manager operations.

- [❌] diredfl
- [✅️] dired-git-info
  - This is nice specially because it comes disabled and I can toggle using ~)~ in Dired buffer
  - However, I'm still having double thoughts about its usefulness... I never needed this feature, but who knows now that I'm aware of it
- [❌] diff-hl
- [❌] fd-dired
- [❌] dired-rsync

*** TODO electric
*** TODO vc
*** undo
These packages are required by ~evil~ in order to enable ~evil-redo~ (~Ctrl-r~) properly.
 - [✅] [[https://github.com/doomemacs/doomemacs/blob/master/modules/emacs/undo/config.el#L3][undo-fu]]
   - Simple, stable linear undo with redo for Emacs.
   - Changes compared to Emacs undo:
     - Redo will not pass the initial undo action
     - Redo winn not undo
     - These constraints can be disabled by pressing ~C-g~ before undo or redo.
   - Doom increases the undo-limit, I'd like to revert that to defaults. Look for the default values at ~preferences/+doom.el~
 - [❌] [[https://github.com/doomemacs/doomemacs/blob/master/modules/emacs/undo/config.el#L27][undo-fu-session]]

*** TODO eshell
- [⚠] eshell-z
- [⚠] eshell-did-you-mean
- [⚠] esh-help
- [⚠] shrink-path
- [⚠] eshell-up
- [⚠] eshell-syntax-highlighting

*** TODO syntax
*** TODO eval
*** TODO lookup
*** TODO lsp
*** TODO magit
*** TODO macos
*** TODO clojure
*** TODO emacs-lisp
*** TODO latex
*** TODO markdown
*** TODO org
*** TODO plantuml
*** TODO ledger
