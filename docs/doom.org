#+TITLE: Learning Doom and Vim

Vi is fundammentally built on command composability. It favors small,
general-purpose commands that can be combined with objects to compose larger
commands.

This philosophy of minimalist commands that can be composed together is the
fundamental originating philosophy of Unix, and Vim exemplifies it like no other
editor.

You know what improves productivity? Mastering motions and operators.

* General Notes

 - =^= go to the first non-blank character of the line
 - =g_= go to the last non-blank character of the line
 - =C-r= redo
 - =%= go to the corresponding (, [, or {
 - =*= go to the next occurrence of the word under the cursor
 - =#= go to the previous occurrence of the word under the cursor
 - How to center the current line in the screen in Vim?
   - zz, zt, zb
 - How to scroll down/up in Vim?
   - ctrl-d, ctrl-u, ctrl-b, ctrl-f. ctrl-e, ctrl-
 - Try using the Toggle functionality more often to remove or bring up eshell or REPL
 - Nice day today! I just learned that pressing =jk= will get me out of INSERT MODE
 - =dot= will repeat the last command
 - completion works via =c-n= and =c-p=
 - =spc sp= to search all files in the current project
 - =/= to search within the current buffer. Use `n` and `N` to go to next and
   previous matches. =?= to search backwards.
 - =s= and type two characters to jump forward to the nearest match
   - if the things I want to jump to is fairly close to where the cursor is I'll
     use evil-snipe (s and S). If it's far away or in another window, I'll use Avy
     (gs SPC)
   - if you want to jump to other matches use =;= and =,=
 - use =c-,= to find next flyspell error
 - use =z-== to fix the wrong word at point
 - use =c-;= to fix previous wrong word.
 - the "dot" command: think if the dot command would repeat your edition correctly
 - use the more general text objects (iw rather than w)
 - prefer text objects to motions when possible
 - visual mode is a smell
 - don't use two sentences where one will due
 - visual mode breaks repeatability
 - custom operators
   - surround
     - change surround <object>: cs
     - add surround: ys
     - delete surround: ds
   - commentary
     - gc <text object>: for example, gcip to comment entire paragraph
   - replace with register: TODO: verify if I want to include this plugin in my conf
 - custom text objects
   - indent
     - we can use =ii= to denote the indentation object e.g. gdii will comment all indentation
 - <verb> i <noun> is amazing
 - =ma= will set a mark in =a= register
 - =`a= will jump back to specific place of mark =a=
 - ='a= will jump to the beginning of the line of the specific mark =a=
 - =g;= cycle through recent changes
 - =g,= reverse direction
 - ='.= jump to last modification line
 - =`.= jump to exact positon in last modification line
 - =:s/search/replace= by default operates on the first match of the current line
 - Subtitute flags
   - The most common flags are probably =g= and =i=
   - =g= works on every match
   - =i= performs case-insensitive match
   - =c= prompts for confirmation of each substitution
 - =c-r= in insert-mode will make evil paste from a register
 - The =0= register is useful because it contains the value of the last yank
   - ="0p= will paste the content of the last yanked value
 - Using =[m= to move to the beginning of previous/current method
 - Using =]m= to move to the beginning of next method
 - =ctrl-o / ctrl-i= cycle through :jumps
 - =g; / g,= cycle through :changes
 - =gh=, =gj=, =gk=, and =gl= makes visual movements instead of logical
 - =M-d= will select the current word, and again will find another ocurrence
 - =M-D= will find occurrence upward
 - In visual mode you can select a word and =R= will select all ocurrences
   - =Ctrl-n= for next selection
   - =Ctrl-p= for previous selection
   - Exclude matches with =RET=
   - You can make an edit and the changes will be reflected in all the selection
 - we can run the =dot= command in a visual selection
 - fix indentation of the whole file ==G=
 - In insert mode we can type =ctrl+x ctrl-l= to enable line completion
 - In insert mode use =ctrl-w= to erase the last inserted word
 - In insert mode use =ctrl-u= to erase the last inserted line
 - Complete file path in insert-mode using =C-x C-f=
 - recording macros
   - press =q= followed by any valid register to start recording. usually =qq=
   - start typing the changes you need to make
   - press =q= again to stop recording
   - press =@<register>= to replay the recorded steps
 - moving lines around
   - you can use =:/<string-in-the-line-you-want-to-move>/m<motion operator>=
   - you can move a line, or a block of lines, with the =:m= command
     - =:m 12= move current line to after line 12
     - =:m $= move current line to after the last line
     - =:m +1= moves down 1 line
     - =:m -2= moves up 1 line
 - move a line up: =ddkP=
 - move a line down: =ddp=
 - this is extremely useful to me: =ctrl-^= will send you back to the previous buffer you were in
 - history of past searches
   - just press =q/=
 - useful selection of =g= commands
   | command | description                                        |
   |---------+----------------------------------------------------|
   | gf      | open file under cursor                             |
   | g;      | traverse forward through the change list           |
   | g,      | traverse backward through the change list          |
   | gi      | go back to last insert position                    |
   | ga      | show char codes for char under cursor              |
   | g&      | repeat last :s on all lines (last replace command) |
   | gv      | repeat last visual selection                       |

* Digging

Some files with more detailed information about Vim

- [[file:vim-marks.org][Vim Marks]]
- [[file:vim-text-objects.org][Vim Text Objects]]
- [[file:vim-motions.org][Vim Motions]]
- [[file:vim-jumplist.org][Vim Jumplist]]
- [[file:vim-fold.org][Vim Fold]]
- [[file:vim-brackets.org][Vim Brackets]]
- [[file:vim-operators.org][Vim Operators]]
- [[file:vim-search.org][Vim Search]]
- [[file:vim-macros.org][Vim Macros]]

* Works in Vim, but seems not to work on Doom [1/3]
- [ ] Global marks are preserved between sessions in Vim
- [ ] :help <doc-entry> Vim docs not available :/
- [X] =[I= show lines with matching word under cursor
  - now, this binding will show up =+vertico/search-symbol-at-point= function


* Learn the Mindset

Don't type it twice, is a pretty good summary of the Vim" Way" of doing things.

Think operators, text objects, and motions


* Cute tricks

- Search and change
  Whenever you want to search and replace some text, you might immediately use the substitute command =:%s=
- On the fly computations
  Do you need to perform quick math? While in insert mode press =C-r==. You will see an equal sign appearing in the bottom of the window.

* Vim Verbs

Single character verbs
| Command | Action                                                |
|---------+-------------------------------------------------------|
| x       | delete character under the cursor                     |
| r       | replace character under cursor with another character |
| s       | delete character under cursor and move to insert mode |


* Vim Text Objects

The second type of "direct object" that Vim verbs can take is a text object. You can think of text objects as a "defined chunk of text".

| Command | Text Object                                         |
|---------+-----------------------------------------------------|
| iw      | applies to everything in the current word           |
| it      | aplies to everything in current xml/html tag        |
| i{      | applies to everything inside nearest curly brackets |



* Resources
- [[https://youtu.be/wlR5gYd6um0][Mastering the Vim Language ]]- Video by thoughtbot
- [[https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim][Your problem with Vim is that you don't grok vi]] - StackOverflow answer
- [[https://benmccormick.org/2014/07/02/learning-vim-in-2014-vim-as-language][Learning Vim as a Language]]  - Ben McCormick blog post
- [[https://medium.com/@mkozlows/why-atom-cant-replace-vim-433852f4b4d1][Why Atom can't replace Vim]] - Mike Kozlowski blog post
- [[https://medium.com/usevim/stop-the-vim-configuration-madness-c825578bbf3e][Stop the Vim configuration madness]]  - Alex R. Young blog post
- Best of Alex R. Young Medium activity:
  - [[https://medium.com/usevim/stop-the-vim-configuration-madness-c825578bbf3e][Stop the Vim configuration madness]]
  - [[https://medium.com/usevim/vim-101-quick-movement-c12889e759e0][Vim 101: Quick movement]]
  - [[https://medium.com/usevim/vim-101-search-and-replace-d1901619c2a6][Vim 101: Search and Replace]]
  - [[https://medium.com/usevim/vim-101-registers-f6ad105dfd89][Vim 101: Registers]]
- [[https://towardsdatascience.com/how-i-learned-to-enjoy-vim-e310e53e8d56][Deliberate Practice on Vim Surround]] - House Lin blog post
- [[http://zzapper.co.uk/vimtips.html][Best of Vim Tips]]  - Zzapper blog post
- [[https://www.youtube.com/watch?v=E-ZbrtoSuzw][Vim: Tutorial on Editing, Navigation, and File Management]]  - Leeren YT video
- [[https://github.com/niyumard/Doom-Emacs-Cheat-Sheet][Doom Emacs CheatSheet]] - Hossein Naghdbishi GB repo
- [[https://www.cs.swarthmore.edu/oldhelp/vim/home.html][vim tips and tricks]] - web page
- [[https://vim.fandom.com/wiki/Moving_lines_up_or_down#Move_command][Move command]] - Vim Tips wiki
- [[https://bennetthardwick.com/beginner-advanced-vim-tips/][Beginner Advanced Vim tips]]  - Bennett Hardwick blog post
- [[https://github.com/adrianscheff/wizardly-tips-vim][Wizardly Tips Vim]]  - Adrian Scheff github readme
